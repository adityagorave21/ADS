#include <iostream>
#include<stack>
#include<vector>


using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;

    node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

node *buildTree(node *&root)
{

    int data;
    cout << "Enter the data -> ";
    cin >> data;
    root = new node(data);

    if (data == -1)
    {
        return NULL;
    }

    cout << "Enter the data to enter in left of " << data << endl;
    root->left = buildTree(root->left);

    cout << "Enter the data to enter in Right of " << data << endl;
    root->right = buildTree(root->right);

    return root;
}

void preorder_it(node *root)
{
    stack<node *> q;
    q.push(root);

    while (!q.empty())
    {
        node *temp = q.top();
        q.pop();

        cout << temp->data << " ";

        if (temp->left)
            q.push(temp->left);

        if (temp->right)
            q.push(temp->right);
    }
}

void inorder_it(struct node *root)
{
    stack<node *> s;
    node *curr = root;

    while (curr != NULL || s.empty() == false)
    {
        while (curr != NULL)
        {
            s.push(curr);
            curr = curr->left;
        }

        curr = s.top();
        s.pop();

        cout << curr->data << " ";
        curr = curr->right;
    }
}

vector<int> postOrderIterative(struct node *root)
{
    vector<int> postOrderList;
    // Check for empty tree
    if (root == NULL)
        return postOrderList;
    stack<node *> S;
    S.push(root);
    node *prev = NULL;
    while (!S.empty())
    {
        auto current = S.top();

        if (prev == NULL || prev->left == current || prev->right == current)
        {
            if (current->left)
                S.push(current->left);
            else if (current->right)
                S.push(current->right);
            else
            {
                S.pop();
                cout << current->data << " ";
            }
        }

        else if (current->left == prev)
        {
            if (current->right)
                S.push(current->right);
            else
            {
                S.pop();
                cout << current->data << " ";
            }
        }
        else if (current->right == prev)
        {
            S.pop();
            cout << current->data << " ";
        }
        prev = current;
    }
    return postOrderList;
}

int main()
{
    node *root = NULL;
    buildTree(root);

    cout << "Inorder -> ";
    inorder_it(root);
    cout << endl;

    cout << "Preoredr -> ";
    preorder_it(root);
    cout << endl;

    cout << "Postorder -> ";
    postOrderIterative(root);
}

